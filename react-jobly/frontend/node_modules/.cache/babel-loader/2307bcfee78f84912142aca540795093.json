{"ast":null,"code":"import axios from 'axios';\nconst BASE_URL = process.env.REACT_APP_BASE_URL || \"http://localhost:3001\";\nclass JoblyApi {\n  static async request(endpoint, data = {}, method = 'get') {\n    console.debug('API Call:', endpoint, data, method);\n    const url = `${BASE_URL}/${endpoint}`;\n    const headers = {\n      Authorization: `Bearer ${JoblyApi.token}`\n    };\n    const params = method === 'get' ? data : {};\n    try {\n      return (await axios({\n        url,\n        method,\n        data,\n        params,\n        headers\n      })).data;\n    } catch (err) {\n      console.error('API Error:', err.response);\n      let message = err.response.data.error.message;\n      throw Array.isArray(message) ? message : [message];\n    }\n  }\n  static async getCompany(handle) {\n    let res = await this.request(`companies/${handle}`);\n    return res.company;\n  }\n  static async getCompanies(searchTerm) {\n    let res = await this.request('companies', {\n      name: searchTerm\n    });\n    return res.companies;\n  }\n  static async getJobs() {\n    let res = await this.request('jobs');\n    return res.jobs;\n  }\n  static async login(data) {\n    let res = await this.request('auth/token', data, 'post');\n    return res.token;\n  }\n  static async register(data) {\n    let res = await this.request('auth/register', data, 'post');\n    return res.token;\n  }\n  static async getCurrentUser() {\n    let res = await this.request('users/me');\n    return res.user;\n  }\n  static async applyJob(jobId) {\n    let res = await this.request(`jobs/${jobId}/apply`, {}, 'post');\n    return res.message;\n  }\n}\nJoblyApi.token = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZ\" + \"SI6InRlc3R1c2VyIiwiaXNBZG1pbiI6ZmFsc2UsImlhdCI6MTU5ODE1OTI1OX0.\" + \"FtrMwBQwe6Ue-glIFgz_Nf8XxRT2YecFCiSpYL0fCXc\";\nexport default JoblyApi;","map":{"version":3,"names":["axios","BASE_URL","process","env","REACT_APP_BASE_URL","JoblyApi","request","endpoint","data","method","console","debug","url","headers","Authorization","token","params","err","error","response","message","Array","isArray","getCompany","handle","res","company","getCompanies","searchTerm","name","companies","getJobs","jobs","login","register","getCurrentUser","user","applyJob","jobId"],"sources":["/mnt/c/Users/Luke/Downloads/react-jobly2/react-jobly/frontend/src/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst BASE_URL = process.env.REACT_APP_BASE_URL || \"http://localhost:3001\";\r\n\r\nclass JoblyApi {\r\n  static token;\r\n\r\n  static async request(endpoint, data = {}, method = 'get') {\r\n    console.debug('API Call:', endpoint, data, method);\r\n    const url = `${BASE_URL}/${endpoint}`;\r\n    const headers = { Authorization: `Bearer ${JoblyApi.token}` };\r\n    const params = (method === 'get') ? data : {};\r\n    try {\r\n      return (await axios({ url, method, data, params, headers })).data;\r\n    } catch (err) {\r\n      console.error('API Error:', err.response);\r\n      let message = err.response.data.error.message;\r\n      throw Array.isArray(message) ? message : [message];\r\n    }\r\n  }\r\n\r\n  static async getCompany(handle) {\r\n    let res = await this.request(`companies/${handle}`);\r\n    return res.company;\r\n  }\r\n\r\n  static async getCompanies(searchTerm) {\r\n    let res = await this.request('companies', { name: searchTerm });\r\n    return res.companies;\r\n  }\r\n\r\n  static async getJobs() {\r\n    let res = await this.request('jobs');\r\n    return res.jobs;\r\n  }\r\n\r\n  static async login(data) {\r\n    let res = await this.request('auth/token', data, 'post');\r\n    return res.token;\r\n  }\r\n\r\n  static async register(data) {\r\n    let res = await this.request('auth/register', data, 'post');\r\n    return res.token;\r\n  }\r\n\r\n  static async getCurrentUser() {\r\n    let res = await this.request('users/me');\r\n    return res.user;\r\n  }\r\n\r\n  static async applyJob(jobId) {\r\n    let res = await this.request(`jobs/${jobId}/apply`, {}, 'post');\r\n    return res.message;\r\n  }\r\n}\r\n\r\nJoblyApi.token = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZ\" +\r\n    \"SI6InRlc3R1c2VyIiwiaXNBZG1pbiI6ZmFsc2UsImlhdCI6MTU5ODE1OTI1OX0.\" +\r\n    \"FtrMwBQwe6Ue-glIFgz_Nf8XxRT2YecFCiSpYL0fCXc\";\r\n\r\nexport default JoblyApi;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,QAAQ,GAAGC,OAAO,CAACC,GAAG,CAACC,kBAAkB,IAAI,uBAAuB;AAE1E,MAAMC,QAAQ,CAAC;EAGb,aAAaC,OAAOA,CAACC,QAAQ,EAAEC,IAAI,GAAG,CAAC,CAAC,EAAEC,MAAM,GAAG,KAAK,EAAE;IACxDC,OAAO,CAACC,KAAK,CAAC,WAAW,EAAEJ,QAAQ,EAAEC,IAAI,EAAEC,MAAM,CAAC;IAClD,MAAMG,GAAG,GAAG,GAAGX,QAAQ,IAAIM,QAAQ,EAAE;IACrC,MAAMM,OAAO,GAAG;MAAEC,aAAa,EAAE,UAAUT,QAAQ,CAACU,KAAK;IAAG,CAAC;IAC7D,MAAMC,MAAM,GAAIP,MAAM,KAAK,KAAK,GAAID,IAAI,GAAG,CAAC,CAAC;IAC7C,IAAI;MACF,OAAO,CAAC,MAAMR,KAAK,CAAC;QAAEY,GAAG;QAAEH,MAAM;QAAED,IAAI;QAAEQ,MAAM;QAAEH;MAAQ,CAAC,CAAC,EAAEL,IAAI;IACnE,CAAC,CAAC,OAAOS,GAAG,EAAE;MACZP,OAAO,CAACQ,KAAK,CAAC,YAAY,EAAED,GAAG,CAACE,QAAQ,CAAC;MACzC,IAAIC,OAAO,GAAGH,GAAG,CAACE,QAAQ,CAACX,IAAI,CAACU,KAAK,CAACE,OAAO;MAC7C,MAAMC,KAAK,CAACC,OAAO,CAACF,OAAO,CAAC,GAAGA,OAAO,GAAG,CAACA,OAAO,CAAC;IACpD;EACF;EAEA,aAAaG,UAAUA,CAACC,MAAM,EAAE;IAC9B,IAAIC,GAAG,GAAG,MAAM,IAAI,CAACnB,OAAO,CAAC,aAAakB,MAAM,EAAE,CAAC;IACnD,OAAOC,GAAG,CAACC,OAAO;EACpB;EAEA,aAAaC,YAAYA,CAACC,UAAU,EAAE;IACpC,IAAIH,GAAG,GAAG,MAAM,IAAI,CAACnB,OAAO,CAAC,WAAW,EAAE;MAAEuB,IAAI,EAAED;IAAW,CAAC,CAAC;IAC/D,OAAOH,GAAG,CAACK,SAAS;EACtB;EAEA,aAAaC,OAAOA,CAAA,EAAG;IACrB,IAAIN,GAAG,GAAG,MAAM,IAAI,CAACnB,OAAO,CAAC,MAAM,CAAC;IACpC,OAAOmB,GAAG,CAACO,IAAI;EACjB;EAEA,aAAaC,KAAKA,CAACzB,IAAI,EAAE;IACvB,IAAIiB,GAAG,GAAG,MAAM,IAAI,CAACnB,OAAO,CAAC,YAAY,EAAEE,IAAI,EAAE,MAAM,CAAC;IACxD,OAAOiB,GAAG,CAACV,KAAK;EAClB;EAEA,aAAamB,QAAQA,CAAC1B,IAAI,EAAE;IAC1B,IAAIiB,GAAG,GAAG,MAAM,IAAI,CAACnB,OAAO,CAAC,eAAe,EAAEE,IAAI,EAAE,MAAM,CAAC;IAC3D,OAAOiB,GAAG,CAACV,KAAK;EAClB;EAEA,aAAaoB,cAAcA,CAAA,EAAG;IAC5B,IAAIV,GAAG,GAAG,MAAM,IAAI,CAACnB,OAAO,CAAC,UAAU,CAAC;IACxC,OAAOmB,GAAG,CAACW,IAAI;EACjB;EAEA,aAAaC,QAAQA,CAACC,KAAK,EAAE;IAC3B,IAAIb,GAAG,GAAG,MAAM,IAAI,CAACnB,OAAO,CAAC,QAAQgC,KAAK,QAAQ,EAAE,CAAC,CAAC,EAAE,MAAM,CAAC;IAC/D,OAAOb,GAAG,CAACL,OAAO;EACpB;AACF;AAEAf,QAAQ,CAACU,KAAK,GAAG,oDAAoD,GACjE,iEAAiE,GACjE,6CAA6C;AAEjD,eAAeV,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module"}